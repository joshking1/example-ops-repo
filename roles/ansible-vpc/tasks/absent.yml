# NOTE: vpc info written to inventory


- name: Clear all security group rules
  ec2_group:
    name: "{{ item.value.name }}"
    description: "{{ item.value.description }}"
    vpc_id: "{{ vpc_id }}"
    rules: "{{ omit }}"
    state: present
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"
  with_dict: "{{ vpcs_security_groups }}"
  loop_control:
    label: "{{ item.value.name }}"
    
# This code is a part of an Ansible playbook that clears all security group rules for a given set of EC2 instances within a VPC. Here's how it works:
# with_dict is a loop that iterates over the dictionary vpcs_security_groups. 
# Each iteration assigns the dictionary value to the item.value variable, and the dictionary key to the item.key variable.
# For each iteration, the ec2_group module is called to modify the security group rules for the security group associated with the name specified in item.value.name.
# The description field in item.value specifies the description of the security group.
# The vpc_id field in item.value specifies the ID of the VPC in which the security group resides.
# The rules field is set to omit which means the module won't change the existing security group rules.
# The state field is set to present which means that the security group should exist.
# The environment section specifies the AWS access key ID, secret access key, and region to use for this playbook.
# In summary, this code clears all security group rules for a specified set of EC2 instances within a VPC, using the ec2_group module provided by Ansible.
# This section of the code sets up environment variables used for authentication to access the Amazon Web Services (AWS) resources. 
# Specifically, it sets the AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_REGION variables to the values specified in the variables aws_access_key_id, aws_secret_access_key, and aws_region, respectively.
# These variables are required to authenticate the connection to the AWS resources, and the AWS SDKs (in this case, the Boto3 library for Python) automatically retrieve the values set in these environment variables to establish the connection. 
# The AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values are used for authentication, while the AWS_REGION value specifies which AWS region to use.

- name: absent security groups
  ec2_group:
    name: "{{ item.value.name }}"
    description: "{{ item.value.description }}"
    vpc_id: "{{ vpc_id }}"
    rules: "{{ omit }}"
    state: absent
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"
  with_dict: "{{ vpcs_security_groups }}"
  loop_control:
    label: "{{ item.value.name }}"


- name: "Create NACL stateless firewall"
  ec2_vpc_nacl:
    vpc_id: "{{ vpc_id }}"
    name: "{{ dc_name }}-nacl"
    region: "{{ aws_region }}"
    subnets: ['public_a', 'public_b', 'public_c']
    tags:
      dc: "{{ dc_name }}"
    ingress: "{{ vpcs_vpc_ingress }}"
    egress:
        - [100, 'all', 'allow', '0.0.0.0/0', null, null, null, null]
    state: absent
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"

- name: absent key pair using provided key_material
  ec2_key:
    name: "{{ vpcs_ec2_key_name }}"
    key_material: "{{ vpcs_ec2_key_material }}"
    state: absent
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"

# create a private hosted zone for the VPC with the Ansible module
- name: absent Route 53 private hosted zone
  route53_zone:
    zone: "{{ vpcs_dns_zone }}"
    state: absent
    vpc_id: "{{ vpc_id }}"
    vpc_region: "{{ aws_region }}"
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"


- name: absent VPC subnets
  ec2_vpc_subnet:
    vpc_id: "{{ vpc_id }}"
    cidr: "{{ item.value.cidr }}"
    az: "{{ item.value.az }}"
    tags:
      Name: "{{ item.key }}"
    state: absent
  with_dict: "{{ vpc_subnets }}"
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"
  register: vpc_subnets

- name: absent internet gateway for outbound traffic
  ec2_vpc_igw:
    vpc_id: "{{ vpc_id }}"
    state: absent
  register: igw
  tags: [ igw ]
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"

- name: Set up public subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc_id }}"
    region: "{{ aws_region }}"
    purge_subnets: false
    lookup: tag
    state: absent
    tags:
      Name: Public
    subnets:
      - public_a
      - public_b
      - public_c
  register: public_route_table
  tags: rtb
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"

- name: absent a VPC
  ec2_vpc_net:
    name: "{{ vpc_vpc_name }}"
    cidr_block: "{{ vpc_vpc_cidr_block }}"
    region: "{{ aws_region }}"
    state: absent
  environment:
    AWS_ACCESS_KEY_ID: "{{ aws_access_key_id }}"
    AWS_SECRET_ACCESS_KEY: "{{ aws_secret_access_key }}"
    AWS_REGION: "{{ aws_region }}"
  register: vpc

#######################




